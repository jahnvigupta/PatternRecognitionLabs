# -*- coding: utf-8 -*-
"""Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S-8OHt48pLE2C74avuLwbpvJeC8SF9hZ
"""

#importing required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split



#reading data from files into dataframe
class1 = pd.read_csv("Class1.txt",sep="\t",header=None)
class2 = pd.read_csv("Class2.txt",sep="\t",header=None)
class1 = class1[[0,1]]
class2 = class2[[0,1]]
#spliting data into train and test 
class1_train, class1_test = train_test_split(class1, test_size=0.3, random_state=42, shuffle=True)
class2_train, class2_test = train_test_split(class2, test_size=0.3, random_state=42, shuffle=True)

#Plotting training data
plt.figure()
plt.scatter(class1_train[[0]],class1_train[[1]],label="Class1")
plt.scatter(class2_train[[0]],class2_train[[1]],label="Class2")
plt.xlabel("Feature1")
plt.ylabel("Feature2")
plt.title("training data")
plt.legend()

#Plotting test data
plt.figure()
plt.scatter(class1_test[[0]],class1_test[[1]],label="Class1")
plt.scatter(class2_test[[0]],class2_test[[1]],label="Class2")
plt.xlabel("Feature1")
plt.ylabel("Feature2")
plt.title("test data")
plt.legend()

#Function for calculating sample mean from data
def mean(data):
  n_cols = len(data.columns)
  mu = np.zeros(n_cols)
  for i in range(len(data)):
    for j in range(n_cols):
      mu[j] = mu[j]+data.iloc[i][j]
  mu = mu/len(data)
  return mu

#Function for calculating sample covariance from data
def covar(data, mean):
  n = len(data)
  n_cols = len(data.columns)
  covar = np.zeros((n_cols,n_cols))
  for i in range(n):
    covar = covar + np.outer(data.iloc[i]-mean, np.transpose(data.iloc[i]-mean))
  covar = covar/n
  return covar

#Function for calculating probability of vec belonging to class with given mean and covariance
def prob(n, mu, covar, vec, total_samp):
  temp_mat = (-1/2)*(np.matmul(np.transpose(vec - mu), np.linalg.inv(covar)))
  temp1 = np.matmul(temp_mat, vec - mu)
  temp2 = (-1/2)*np.log(np.linalg.det(covar))
  temp3 = np.log(n/total_samp)
  prob = temp1+temp2+temp3
  return prob

#Calculating sample mean for classes
mean1 = mean(class1_train)
mean2 = mean(class2_train)

#Calculating sample covariance matrix for classes
cov1 = covar(class1_train, mean1)
cov2 = covar(class2_train, mean2)

cov1

cov2

#Initialising correct predictions to zero
corr_pred = 0

#Getting correct predictions in class1
for i in range(len(class1_test)):
  prob1 = prob(len(class1_train),mean1,cov1,class1_test.iloc[i],len(class1_train)+len(class2_train))
  prob2 = prob(len(class2_train),mean2,cov2,class1_test.iloc[i],len(class1_train)+len(class2_train))
  if(prob1>prob2):
    corr_pred = corr_pred+1

#Getting correct predictions in class2
for i in range(len(class2_test)):
  prob1 = prob(len(class1_train),mean1,cov1,class2_test.iloc[i],len(class1_train)+len(class2_train))
  prob2 = prob(len(class2_train),mean2,cov2,class2_test.iloc[i],len(class1_train)+len(class2_train))
  if(prob1<prob2):
    corr_pred = corr_pred+1

#Printing accuracy
print("Accuracy is : ",corr_pred/(len(class1_test)+len(class2_test)))